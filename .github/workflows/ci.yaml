name: Backend CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  TF_VERSION: "1.8.5"

jobs:
# ────────────────────────── build / test / plan ──────────────────────────
  build-test-plan:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install dev deps & run tests
      run: |
        pip install pytest
        pytest -q

    - name: Build lambda.zip
      run: |
        cd lambda_src
        zip -q -r ../lambda.zip lambda_function.py
        cd ..

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.ROLE_ARN }}
        aws-region:     ${{ env.AWS_REGION }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform init
      run: terraform init -input=false

    - run: terraform fmt -check
    - run: terraform validate

    - name: Terraform plan
      id: plan
      run: |
        terraform plan -no-color -out=tfplan
        terraform show -no-color tfplan > tfplan.txt

    - uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: tfplan.txt
        retention-days: 3

    - name: Comment plan on PR
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        message: |
          **Terraform plan**
          ```
          ${{ steps.plan.outputs.stdout }}
          ```

# ─────────────────────────────── apply ────────────────────────────────
  apply:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build-test-plan
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.ROLE_ARN }}
        aws-region:     ${{ env.AWS_REGION }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - run: terraform init -input=false
    - run: terraform apply -auto-approve
